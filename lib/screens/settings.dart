import 'package:flutter/material.dart';
import '../db/database_helper.dart'; // –ü–æ–¥–∫–ª—é—á–∞–µ–º DatabaseHelper

class SettingsScreen extends StatefulWidget {
  final String userEmail;

  const SettingsScreen({super.key, required this.userEmail});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  bool _notificationsEnabled = true; // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ SharedPreferences)
  Future<void> _saveNotificationSettings(bool value) async {
    setState(() {
      _notificationsEnabled = value;
    });

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ SharedPreferences
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ SharedPreferences:
    // SharedPreferences prefs = await SharedPreferences.getInstance();
    // prefs.setBool('notificationsEnabled', value);

    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    _showMessage('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${value ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}');
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
  void _showMessage(String text) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(text)));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: SizedBox(
          width: 375,
          height: 812,
          child: Stack(
            children: [
              // üì± –§–æ–Ω
              Positioned.fill(
                child: Image.asset(
                  'assets/phon.png',
                  fit: BoxFit.cover,
                ),
              ),

              // üîô –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
              Positioned(
                top: 32,
                left: 21,
                child: GestureDetector(
                  onTap: () => Navigator.pop(context),
                  child: Container(
                    width: 59,
                    height: 54,
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Center(
                      child: Icon(Icons.arrow_back_ios, color: Colors.white),
                    ),
                  ),
                ),
              ),

              // üßæ –ó–∞–≥–æ–ª–æ–≤–æ–∫
              const Positioned(
                top: 102,
                left: 17,
                child: Text(
                  '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                  style: TextStyle(
                    fontFamily: 'Poppins',
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ),

              // ‚öôÔ∏è –°–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π
              Positioned(
                top: 180,
                left: 17,
                right: 17,
                child: Column(
                  children: [
                    // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"
                    GestureDetector(
                      onTap: () {
                        _showChangePasswordDialog(context, widget.userEmail);
                      },
                      child: Container(
                        height: 80,
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        child: Row(
                          children: const [
                            Icon(Icons.lock_outline, color: Colors.white, size: 28),
                            SizedBox(width: 16),
                            Text(
                              '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å',
                              style: TextStyle(
                                fontFamily: 'Poppins',
                                fontSize: 20,
                                fontWeight: FontWeight.w500,
                                color: Colors.white,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 20),

                    // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    GestureDetector(
                      onTap: () {
                        _saveNotificationSettings(!_notificationsEnabled);
                      },
                      child: Container(
                        height: 80,
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            const Row(
                              children: [
                                Icon(Icons.notifications_none, color: Colors.white, size: 28),
                                SizedBox(width: 16),
                                Text(
                                  '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                  style: TextStyle(
                                    fontFamily: 'Poppins',
                                    fontSize: 20,
                                    fontWeight: FontWeight.w500,
                                    color: Colors.white,
                                  ),
                                ),
                              ],
                            ),
                            Switch(
                              value: _notificationsEnabled,
                              onChanged: (value) {
                                _saveNotificationSettings(value);
                              },
                              activeColor: Colors.lightGreenAccent,
                              inactiveThumbColor: Colors.grey.shade300,
                              inactiveTrackColor: Colors.grey.shade500,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—è–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  void _showChangePasswordDialog(BuildContext context, String userEmail) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: const Color(0xFF2E2E2E),
          title: const Text(
            '–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å',
            style: TextStyle(
              fontFamily: 'Poppins',
              fontSize: 22,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          content: ChangePasswordDialog(userEmail: userEmail),
        );
      },
    );
  }
}

// –î–∏–∞–ª–æ–≥ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
class ChangePasswordDialog extends StatefulWidget {
  final String userEmail;

  const ChangePasswordDialog({super.key, required this.userEmail});

  @override
  State<ChangePasswordDialog> createState() => _ChangePasswordDialogState();
}

class _ChangePasswordDialogState extends State<ChangePasswordDialog> {
  final currentPasswordController = TextEditingController();
  final newPasswordController = TextEditingController();
  bool _loading = false;

  Future<void> _savePassword() async {
    setState(() => _loading = true);

    final current = currentPasswordController.text.trim();
    final newPass = newPasswordController.text.trim();

    if (current.isEmpty || newPass.isEmpty) {
      _showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      setState(() => _loading = false);
      return;
    }

    final user = await DatabaseHelper.instance.getUserByEmail(widget.userEmail);

    if (user == null) {
      _showMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else if (user['password'] != current) {
      _showMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
    } else {
      await DatabaseHelper.instance.updatePassword(widget.userEmail, newPass);
      _showMessage('–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω');
      Navigator.pop(context); 
    }

    setState(() => _loading = false);
  }

  void _showMessage(String text) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(text)));
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        _passwordField(currentPasswordController, '–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'),
        const SizedBox(height: 16),
        _passwordField(newPasswordController, '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'),
        const SizedBox(height: 24),
        GestureDetector(
          onTap: _loading ? null : _savePassword,
          child: Container(
            height: 52,
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                colors: [Color(0xFF00AC87), Color(0xFF728C00)],
              ),
              borderRadius: BorderRadius.circular(12),
            ),
            alignment: Alignment.center,
            child: _loading
                ? const CircularProgressIndicator(color: Colors.white)
                : const Text(
                    '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                    style: TextStyle(
                      fontFamily: 'Montserrat',
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
          ),
        ),
      ],
    );
  }

  Widget _passwordField(TextEditingController controller, String label) {
    return TextField(
      controller: controller,
      obscureText: true,
      style: const TextStyle(color: Colors.white, fontFamily: 'Montserrat'),
      decoration: InputDecoration(
        labelText: label,
        labelStyle: const TextStyle(color: Colors.white70),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Colors.white38),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Colors.white),
        ),
      ),
    );
  }
}
